{"version":3,"sources":["scripts/main.js"],"names":["startBtn","document","querySelector","fieldRows","rows","scoreBoard","messageStart","messageWin","messageLose","columns","score","field","setNewCell","checkIfEmpty","value","Math","random","check","row","floor","col","updateTheGame","updateCell","cells","innerText","String","cell","num","classList","add","filterRow","filter","el","slide","newRow","i","length","isFinite","checkIfWin","push","remove","slideLeft","r","slideRight","reverse","slideUp","slideDown","checkIfPossible","checkIfLose","addEventListener","e","contains","code"],"mappings":"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","file":"main.43023c06.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startBtn = document.querySelector('.start');\nconst fieldRows = document.querySelector('tbody').rows;\nconst scoreBoard = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  updateTheGame();\n  setNewCell();\n  setNewCell();\n\n  startBtn.classList.add('restart');\n  startBtn.innerText = 'Restart';\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\nfunction setNewCell() {\n  if (!checkIfEmpty()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (field[row][col] === 0) {\n      field[row][col] = value;\n      check = true;\n\n      updateTheGame();\n    }\n  }\n}\n\nfunction updateTheGame() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const currentCell = fieldRows[row].cells[col];\n      const num = field[row][col];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreBoard.innerText = String(score);\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = String(num);\n    cell.classList.add(`field-cell--${String(num)}`);\n  }\n}\n\nfunction checkIfEmpty() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (field[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\ndocument.addEventListener('keyup', e => {\n  if (startBtn.classList.contains('restart')) {\n    switch (e.code) {\n      case 'ArrowLeft':\n        slideLeft();\n        setNewCell();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        setNewCell();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        setNewCell();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        setNewCell();\n        break;\n    }\n  }\n\n  if (!checkIfPossible()) {\n    checkIfLose();\n  }\n});\n\nfunction filterRow(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterRow(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      checkIfWin(newRow[i]);\n    }\n  }\n  newRow = filterRow(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction checkIfWin(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startBtn.classList.remove('restart');\n    startBtn.innerText = 'Start';\n  }\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = slide(row);\n    field[r] = row;\n  }\n\n  updateTheGame();\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[r] = row;\n  }\n  updateTheGame();\n}\n\nfunction slideUp() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row = slide(row);\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n  updateTheGame();\n}\n\nfunction slideDown() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  updateTheGame();\n}\n\nfunction checkIfPossible() {\n  let check = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (row < 3) {\n        if (field[row][col] === field[row + 1][col]\n          || field[row][col] === field[row][col + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !checkIfEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkIfLose() {\n  messageLose.classList.remove('hidden');\n  startBtn.classList.remove('restart');\n  startBtn.innerText = 'Start';\n}\n"]}